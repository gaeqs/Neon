# This starter workflow is for a CMake project running on multiple platforms.
# The script installs the following libraries: assimp, vulkan, eigen3, catch2,
# glfw2 (using glfw3 on Linux), glm, nlohmann-json, and libzip.
name: CMake on multiple platforms

on:
  push:
    branches: [ "master", "actions" ]
  pull_request:
    branches: [ "master", "actions" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4

    # Install dependencies on Linux using apt-get
    - name: Install dependencies on Linux
      if: runner.os != 'Windows'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libassimp-dev \
          libvulkan-dev \
          libeigen3-dev \
          catch2 \
          libglfw3-dev \
          libglm-dev \
          nlohmann-json3-dev \
          libzip-dev \
          libbz2-dev \
          libnotify-bin

    - name: Prepare Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.1
      with:
        vulkan-query-version: 1.4.304.1
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true

    # Install dependencies on Windows using vcpkg
    - name: Install dependencies on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        C:\vcpkg\vcpkg.exe install

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake on Windows (using vcpkg toolchain file)
    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DNEON_TESTS:BOOL=ON
        -DSPIRV_WERROR:BOOL=OFF
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    # Configure CMake on Linux
    - name: Configure CMake on Linux
      if: runner.os != 'Windows'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DNEON_TESTS:BOOL=ON
        -DSPIRV_WERROR:BOOL=OFF
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
